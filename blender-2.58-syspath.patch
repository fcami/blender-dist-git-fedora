diff -up blender-2.57/source/blender/blenfont/intern/blf_lang.c.syspath blender-2.57/source/blender/blenfont/intern/blf_lang.c
--- blender-2.57/source/blender/blenfont/intern/blf_lang.c.syspath	2011-04-14 17:19:49.000000000 +0200
+++ blender-2.57/source/blender/blenfont/intern/blf_lang.c	2011-04-16 21:26:46.734205021 +0200
@@ -68,15 +68,15 @@ static char global_encoding_name[32];
 
 void BLF_lang_init(void)
 {
-	char *messagepath= BLI_get_folder(BLENDER_DATAFILES, "locale");
-	
+        // char *messagepath= BLI_get_folder(BLENDER_DATAFILES, "locale");
+        char *messagepath = "/usr/share/locale";
+
 	BLI_strncpy(global_encoding_name, SYSTEM_ENCODING_DEFAULT, sizeof(global_encoding_name));
 	
 	if (messagepath)
 		BLI_strncpy(global_messagepath, messagepath, sizeof(global_messagepath));
 	else
 		global_messagepath[0]= '\0';
-	
 }
 
 /* XXX WARNING!!! IN osx somehow the previous function call jumps in this one??? (ton, ppc) */
diff -up blender-2.58/intern/ghost/intern/GHOST_SystemPathsX11.cpp.sp blender-2.58/intern/ghost/intern/GHOST_SystemPathsX11.cpp
--- blender-2.58/intern/ghost/intern/GHOST_SystemPathsX11.cpp.sp	2011-06-30 17:58:48.955000009 +0200
+++ blender-2.58/intern/ghost/intern/GHOST_SystemPathsX11.cpp	2011-06-30 17:59:59.334000028 +0200
@@ -56,6 +56,7 @@ GHOST_SystemPathsX11::~GHOST_SystemPaths
 const GHOST_TUns8* GHOST_SystemPathsX11::getSystemDir() const
 {
 	/* no prefix assumes a portable build which only uses bundled scripts */
+  printf("##1: PREFIX: %s\n", PREFIX);
 #ifdef PREFIX
 	return (GHOST_TUns8*) PREFIX "/share";
 #else
diff -up blender-2.58/source/blender/blenlib/intern/path_util.c.sp blender-2.58/source/blender/blenlib/intern/path_util.c
--- blender-2.58/source/blender/blenlib/intern/path_util.c.sp	2011-06-22 17:24:58.000000000 +0200
+++ blender-2.58/source/blender/blenlib/intern/path_util.c	2011-06-30 17:47:50.532000005 +0200
@@ -955,42 +955,7 @@ static int get_path_user(char *targetpat
 static int get_path_system(char *targetpath, const char *folder_name, const char *subfolder_name, const char *envvar, const int ver)
 {
 	char system_path[FILE_MAX];
-	const char *system_base_path;
-
-
-	/* first allow developer only overrides to the system path
-	 * these are only used when running blender from source */
-	char cwd[FILE_MAX];
-	char relfolder[FILE_MAX];
-	char bprogdir[FILE_MAX];
-
-	/* use argv[0] (bprogname) to get the path to the executable */
-	BLI_split_dirfile(bprogname, bprogdir, NULL);
-
-	if(folder_name) {
-		if (subfolder_name) {
-			BLI_join_dirfile(relfolder, sizeof(relfolder), folder_name, subfolder_name);
-		} else {
-			BLI_strncpy(relfolder, folder_name, sizeof(relfolder));
-		}
-	}
-	else {
-		relfolder[0]= '\0';
-	}
-
-	/* try CWD/release/folder_name */
-	if(BLI_getwdN(cwd, sizeof(cwd))) {
-		if(test_path(targetpath, cwd, "release", relfolder)) {
-			return 1;
-		}
-	}
-
-	/* try EXECUTABLE_DIR/release/folder_name */
-	if(test_path(targetpath, bprogdir, "release", relfolder))
-		return 1;
-	/* end developer overrides */
-
-
+	const char *system_base_path; 
 
 	system_path[0] = '\0';
 